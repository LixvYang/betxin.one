// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/dal/sqlmodel"
)

func newRefund(db *gorm.DB, opts ...gen.DOOption) refund {
	_refund := refund{}

	_refund.refundDo.UseDB(db, opts...)
	_refund.refundDo.UseModel(&sqlmodel.Refund{})

	tableName := _refund.refundDo.TableName()
	_refund.ALL = field.NewAsterisk(tableName)
	_refund.ID = field.NewInt32(tableName, "id")
	_refund.UID = field.NewString(tableName, "uid")
	_refund.AssetID = field.NewString(tableName, "asset_id")
	_refund.TraceID = field.NewString(tableName, "trace_id")
	_refund.Price = field.NewString(tableName, "price")
	_refund.Select = field.NewBool(tableName, "select")
	_refund.Memo = field.NewString(tableName, "memo")
	_refund.CreatedAt = field.NewInt64(tableName, "created_at")

	_refund.fillFieldMap()

	return _refund
}

type refund struct {
	refundDo refundDo

	ALL       field.Asterisk
	ID        field.Int32
	UID       field.String
	AssetID   field.String
	TraceID   field.String
	Price     field.String // 退款金额
	Select    field.Bool   // 选择
	Memo      field.String
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (r refund) Table(newTableName string) *refund {
	r.refundDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refund) As(alias string) *refund {
	r.refundDo.DO = *(r.refundDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refund) updateTableName(table string) *refund {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.UID = field.NewString(table, "uid")
	r.AssetID = field.NewString(table, "asset_id")
	r.TraceID = field.NewString(table, "trace_id")
	r.Price = field.NewString(table, "price")
	r.Select = field.NewBool(table, "select")
	r.Memo = field.NewString(table, "memo")
	r.CreatedAt = field.NewInt64(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *refund) WithContext(ctx context.Context) IRefundDo { return r.refundDo.WithContext(ctx) }

func (r refund) TableName() string { return r.refundDo.TableName() }

func (r refund) Alias() string { return r.refundDo.Alias() }

func (r refund) Columns(cols ...field.Expr) gen.Columns { return r.refundDo.Columns(cols...) }

func (r *refund) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refund) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["uid"] = r.UID
	r.fieldMap["asset_id"] = r.AssetID
	r.fieldMap["trace_id"] = r.TraceID
	r.fieldMap["price"] = r.Price
	r.fieldMap["select"] = r.Select
	r.fieldMap["memo"] = r.Memo
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r refund) clone(db *gorm.DB) refund {
	r.refundDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refund) replaceDB(db *gorm.DB) refund {
	r.refundDo.ReplaceDB(db)
	return r
}

type refundDo struct{ gen.DO }

type IRefundDo interface {
	gen.SubQuery
	Debug() IRefundDo
	WithContext(ctx context.Context) IRefundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRefundDo
	WriteDB() IRefundDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRefundDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRefundDo
	Not(conds ...gen.Condition) IRefundDo
	Or(conds ...gen.Condition) IRefundDo
	Select(conds ...field.Expr) IRefundDo
	Where(conds ...gen.Condition) IRefundDo
	Order(conds ...field.Expr) IRefundDo
	Distinct(cols ...field.Expr) IRefundDo
	Omit(cols ...field.Expr) IRefundDo
	Join(table schema.Tabler, on ...field.Expr) IRefundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRefundDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRefundDo
	Group(cols ...field.Expr) IRefundDo
	Having(conds ...gen.Condition) IRefundDo
	Limit(limit int) IRefundDo
	Offset(offset int) IRefundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRefundDo
	Unscoped() IRefundDo
	Create(values ...*sqlmodel.Refund) error
	CreateInBatches(values []*sqlmodel.Refund, batchSize int) error
	Save(values ...*sqlmodel.Refund) error
	First() (*sqlmodel.Refund, error)
	Take() (*sqlmodel.Refund, error)
	Last() (*sqlmodel.Refund, error)
	Find() ([]*sqlmodel.Refund, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Refund, err error)
	FindInBatches(result *[]*sqlmodel.Refund, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sqlmodel.Refund) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRefundDo
	Assign(attrs ...field.AssignExpr) IRefundDo
	Joins(fields ...field.RelationField) IRefundDo
	Preload(fields ...field.RelationField) IRefundDo
	FirstOrInit() (*sqlmodel.Refund, error)
	FirstOrCreate() (*sqlmodel.Refund, error)
	FindByPage(offset int, limit int) (result []*sqlmodel.Refund, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRefundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r refundDo) Debug() IRefundDo {
	return r.withDO(r.DO.Debug())
}

func (r refundDo) WithContext(ctx context.Context) IRefundDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refundDo) ReadDB() IRefundDo {
	return r.Clauses(dbresolver.Read)
}

func (r refundDo) WriteDB() IRefundDo {
	return r.Clauses(dbresolver.Write)
}

func (r refundDo) Session(config *gorm.Session) IRefundDo {
	return r.withDO(r.DO.Session(config))
}

func (r refundDo) Clauses(conds ...clause.Expression) IRefundDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refundDo) Returning(value interface{}, columns ...string) IRefundDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refundDo) Not(conds ...gen.Condition) IRefundDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refundDo) Or(conds ...gen.Condition) IRefundDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refundDo) Select(conds ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refundDo) Where(conds ...gen.Condition) IRefundDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refundDo) Order(conds ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refundDo) Distinct(cols ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refundDo) Omit(cols ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refundDo) Join(table schema.Tabler, on ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refundDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRefundDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refundDo) RightJoin(table schema.Tabler, on ...field.Expr) IRefundDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refundDo) Group(cols ...field.Expr) IRefundDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refundDo) Having(conds ...gen.Condition) IRefundDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refundDo) Limit(limit int) IRefundDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refundDo) Offset(offset int) IRefundDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRefundDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refundDo) Unscoped() IRefundDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refundDo) Create(values ...*sqlmodel.Refund) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refundDo) CreateInBatches(values []*sqlmodel.Refund, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refundDo) Save(values ...*sqlmodel.Refund) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refundDo) First() (*sqlmodel.Refund, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Refund), nil
	}
}

func (r refundDo) Take() (*sqlmodel.Refund, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Refund), nil
	}
}

func (r refundDo) Last() (*sqlmodel.Refund, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Refund), nil
	}
}

func (r refundDo) Find() ([]*sqlmodel.Refund, error) {
	result, err := r.DO.Find()
	return result.([]*sqlmodel.Refund), err
}

func (r refundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Refund, err error) {
	buf := make([]*sqlmodel.Refund, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refundDo) FindInBatches(result *[]*sqlmodel.Refund, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refundDo) Attrs(attrs ...field.AssignExpr) IRefundDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refundDo) Assign(attrs ...field.AssignExpr) IRefundDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refundDo) Joins(fields ...field.RelationField) IRefundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refundDo) Preload(fields ...field.RelationField) IRefundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refundDo) FirstOrInit() (*sqlmodel.Refund, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Refund), nil
	}
}

func (r refundDo) FirstOrCreate() (*sqlmodel.Refund, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Refund), nil
	}
}

func (r refundDo) FindByPage(offset int, limit int) (result []*sqlmodel.Refund, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refundDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refundDo) Delete(models ...*sqlmodel.Refund) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refundDo) withDO(do gen.Dao) *refundDo {
	r.DO = *do.(*gen.DO)
	return r
}
