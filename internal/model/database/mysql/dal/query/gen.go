// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Bonuse        *bonuse
	Category      *category
	Collect       *collect
	Feedback      *feedback
	Message       *message
	Refund        *refund
	Snapshot      *snapshot
	Topic         *topic
	TopicPurchase *topicPurchase
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Bonuse = &Q.Bonuse
	Category = &Q.Category
	Collect = &Q.Collect
	Feedback = &Q.Feedback
	Message = &Q.Message
	Refund = &Q.Refund
	Snapshot = &Q.Snapshot
	Topic = &Q.Topic
	TopicPurchase = &Q.TopicPurchase
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Bonuse:        newBonuse(db, opts...),
		Category:      newCategory(db, opts...),
		Collect:       newCollect(db, opts...),
		Feedback:      newFeedback(db, opts...),
		Message:       newMessage(db, opts...),
		Refund:        newRefund(db, opts...),
		Snapshot:      newSnapshot(db, opts...),
		Topic:         newTopic(db, opts...),
		TopicPurchase: newTopicPurchase(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bonuse        bonuse
	Category      category
	Collect       collect
	Feedback      feedback
	Message       message
	Refund        refund
	Snapshot      snapshot
	Topic         topic
	TopicPurchase topicPurchase
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Bonuse:        q.Bonuse.clone(db),
		Category:      q.Category.clone(db),
		Collect:       q.Collect.clone(db),
		Feedback:      q.Feedback.clone(db),
		Message:       q.Message.clone(db),
		Refund:        q.Refund.clone(db),
		Snapshot:      q.Snapshot.clone(db),
		Topic:         q.Topic.clone(db),
		TopicPurchase: q.TopicPurchase.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Bonuse:        q.Bonuse.replaceDB(db),
		Category:      q.Category.replaceDB(db),
		Collect:       q.Collect.replaceDB(db),
		Feedback:      q.Feedback.replaceDB(db),
		Message:       q.Message.replaceDB(db),
		Refund:        q.Refund.replaceDB(db),
		Snapshot:      q.Snapshot.replaceDB(db),
		Topic:         q.Topic.replaceDB(db),
		TopicPurchase: q.TopicPurchase.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Bonuse        IBonuseDo
	Category      ICategoryDo
	Collect       ICollectDo
	Feedback      IFeedbackDo
	Message       IMessageDo
	Refund        IRefundDo
	Snapshot      ISnapshotDo
	Topic         ITopicDo
	TopicPurchase ITopicPurchaseDo
	User          IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bonuse:        q.Bonuse.WithContext(ctx),
		Category:      q.Category.WithContext(ctx),
		Collect:       q.Collect.WithContext(ctx),
		Feedback:      q.Feedback.WithContext(ctx),
		Message:       q.Message.WithContext(ctx),
		Refund:        q.Refund.WithContext(ctx),
		Snapshot:      q.Snapshot.WithContext(ctx),
		Topic:         q.Topic.WithContext(ctx),
		TopicPurchase: q.TopicPurchase.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
