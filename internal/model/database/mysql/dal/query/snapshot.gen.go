// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/dal/sqlmodel"
)

func newSnapshot(db *gorm.DB, opts ...gen.DOOption) snapshot {
	_snapshot := snapshot{}

	_snapshot.snapshotDo.UseDB(db, opts...)
	_snapshot.snapshotDo.UseModel(&sqlmodel.Snapshot{})

	tableName := _snapshot.snapshotDo.TableName()
	_snapshot.ALL = field.NewAsterisk(tableName)
	_snapshot.ID = field.NewInt64(tableName, "id")
	_snapshot.TraceID = field.NewString(tableName, "trace_id")
	_snapshot.Memo = field.NewString(tableName, "memo")
	_snapshot.Type = field.NewString(tableName, "type")
	_snapshot.SnapshotID = field.NewString(tableName, "snapshot_id")
	_snapshot.OpponentID = field.NewString(tableName, "opponent_id")
	_snapshot.AssetID = field.NewString(tableName, "asset_id")
	_snapshot.Amount = field.NewString(tableName, "amount")
	_snapshot.OpeningBalance = field.NewString(tableName, "opening_balance")
	_snapshot.ClosingBalance = field.NewString(tableName, "closing_balance")
	_snapshot.CreatedAt = field.NewString(tableName, "created_at")

	_snapshot.fillFieldMap()

	return _snapshot
}

type snapshot struct {
	snapshotDo snapshotDo

	ALL            field.Asterisk
	ID             field.Int64
	TraceID        field.String
	Memo           field.String
	Type           field.String
	SnapshotID     field.String
	OpponentID     field.String
	AssetID        field.String
	Amount         field.String
	OpeningBalance field.String
	ClosingBalance field.String
	CreatedAt      field.String

	fieldMap map[string]field.Expr
}

func (s snapshot) Table(newTableName string) *snapshot {
	s.snapshotDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s snapshot) As(alias string) *snapshot {
	s.snapshotDo.DO = *(s.snapshotDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *snapshot) updateTableName(table string) *snapshot {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TraceID = field.NewString(table, "trace_id")
	s.Memo = field.NewString(table, "memo")
	s.Type = field.NewString(table, "type")
	s.SnapshotID = field.NewString(table, "snapshot_id")
	s.OpponentID = field.NewString(table, "opponent_id")
	s.AssetID = field.NewString(table, "asset_id")
	s.Amount = field.NewString(table, "amount")
	s.OpeningBalance = field.NewString(table, "opening_balance")
	s.ClosingBalance = field.NewString(table, "closing_balance")
	s.CreatedAt = field.NewString(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *snapshot) WithContext(ctx context.Context) ISnapshotDo { return s.snapshotDo.WithContext(ctx) }

func (s snapshot) TableName() string { return s.snapshotDo.TableName() }

func (s snapshot) Alias() string { return s.snapshotDo.Alias() }

func (s snapshot) Columns(cols ...field.Expr) gen.Columns { return s.snapshotDo.Columns(cols...) }

func (s *snapshot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *snapshot) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["trace_id"] = s.TraceID
	s.fieldMap["memo"] = s.Memo
	s.fieldMap["type"] = s.Type
	s.fieldMap["snapshot_id"] = s.SnapshotID
	s.fieldMap["opponent_id"] = s.OpponentID
	s.fieldMap["asset_id"] = s.AssetID
	s.fieldMap["amount"] = s.Amount
	s.fieldMap["opening_balance"] = s.OpeningBalance
	s.fieldMap["closing_balance"] = s.ClosingBalance
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s snapshot) clone(db *gorm.DB) snapshot {
	s.snapshotDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s snapshot) replaceDB(db *gorm.DB) snapshot {
	s.snapshotDo.ReplaceDB(db)
	return s
}

type snapshotDo struct{ gen.DO }

type ISnapshotDo interface {
	gen.SubQuery
	Debug() ISnapshotDo
	WithContext(ctx context.Context) ISnapshotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISnapshotDo
	WriteDB() ISnapshotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISnapshotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISnapshotDo
	Not(conds ...gen.Condition) ISnapshotDo
	Or(conds ...gen.Condition) ISnapshotDo
	Select(conds ...field.Expr) ISnapshotDo
	Where(conds ...gen.Condition) ISnapshotDo
	Order(conds ...field.Expr) ISnapshotDo
	Distinct(cols ...field.Expr) ISnapshotDo
	Omit(cols ...field.Expr) ISnapshotDo
	Join(table schema.Tabler, on ...field.Expr) ISnapshotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISnapshotDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISnapshotDo
	Group(cols ...field.Expr) ISnapshotDo
	Having(conds ...gen.Condition) ISnapshotDo
	Limit(limit int) ISnapshotDo
	Offset(offset int) ISnapshotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISnapshotDo
	Unscoped() ISnapshotDo
	Create(values ...*sqlmodel.Snapshot) error
	CreateInBatches(values []*sqlmodel.Snapshot, batchSize int) error
	Save(values ...*sqlmodel.Snapshot) error
	First() (*sqlmodel.Snapshot, error)
	Take() (*sqlmodel.Snapshot, error)
	Last() (*sqlmodel.Snapshot, error)
	Find() ([]*sqlmodel.Snapshot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Snapshot, err error)
	FindInBatches(result *[]*sqlmodel.Snapshot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sqlmodel.Snapshot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISnapshotDo
	Assign(attrs ...field.AssignExpr) ISnapshotDo
	Joins(fields ...field.RelationField) ISnapshotDo
	Preload(fields ...field.RelationField) ISnapshotDo
	FirstOrInit() (*sqlmodel.Snapshot, error)
	FirstOrCreate() (*sqlmodel.Snapshot, error)
	FindByPage(offset int, limit int) (result []*sqlmodel.Snapshot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISnapshotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s snapshotDo) Debug() ISnapshotDo {
	return s.withDO(s.DO.Debug())
}

func (s snapshotDo) WithContext(ctx context.Context) ISnapshotDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s snapshotDo) ReadDB() ISnapshotDo {
	return s.Clauses(dbresolver.Read)
}

func (s snapshotDo) WriteDB() ISnapshotDo {
	return s.Clauses(dbresolver.Write)
}

func (s snapshotDo) Session(config *gorm.Session) ISnapshotDo {
	return s.withDO(s.DO.Session(config))
}

func (s snapshotDo) Clauses(conds ...clause.Expression) ISnapshotDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s snapshotDo) Returning(value interface{}, columns ...string) ISnapshotDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s snapshotDo) Not(conds ...gen.Condition) ISnapshotDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s snapshotDo) Or(conds ...gen.Condition) ISnapshotDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s snapshotDo) Select(conds ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s snapshotDo) Where(conds ...gen.Condition) ISnapshotDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s snapshotDo) Order(conds ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s snapshotDo) Distinct(cols ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s snapshotDo) Omit(cols ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s snapshotDo) Join(table schema.Tabler, on ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s snapshotDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s snapshotDo) RightJoin(table schema.Tabler, on ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s snapshotDo) Group(cols ...field.Expr) ISnapshotDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s snapshotDo) Having(conds ...gen.Condition) ISnapshotDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s snapshotDo) Limit(limit int) ISnapshotDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s snapshotDo) Offset(offset int) ISnapshotDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s snapshotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISnapshotDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s snapshotDo) Unscoped() ISnapshotDo {
	return s.withDO(s.DO.Unscoped())
}

func (s snapshotDo) Create(values ...*sqlmodel.Snapshot) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s snapshotDo) CreateInBatches(values []*sqlmodel.Snapshot, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s snapshotDo) Save(values ...*sqlmodel.Snapshot) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s snapshotDo) First() (*sqlmodel.Snapshot, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Snapshot), nil
	}
}

func (s snapshotDo) Take() (*sqlmodel.Snapshot, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Snapshot), nil
	}
}

func (s snapshotDo) Last() (*sqlmodel.Snapshot, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Snapshot), nil
	}
}

func (s snapshotDo) Find() ([]*sqlmodel.Snapshot, error) {
	result, err := s.DO.Find()
	return result.([]*sqlmodel.Snapshot), err
}

func (s snapshotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Snapshot, err error) {
	buf := make([]*sqlmodel.Snapshot, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s snapshotDo) FindInBatches(result *[]*sqlmodel.Snapshot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s snapshotDo) Attrs(attrs ...field.AssignExpr) ISnapshotDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s snapshotDo) Assign(attrs ...field.AssignExpr) ISnapshotDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s snapshotDo) Joins(fields ...field.RelationField) ISnapshotDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s snapshotDo) Preload(fields ...field.RelationField) ISnapshotDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s snapshotDo) FirstOrInit() (*sqlmodel.Snapshot, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Snapshot), nil
	}
}

func (s snapshotDo) FirstOrCreate() (*sqlmodel.Snapshot, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Snapshot), nil
	}
}

func (s snapshotDo) FindByPage(offset int, limit int) (result []*sqlmodel.Snapshot, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s snapshotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s snapshotDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s snapshotDo) Delete(models ...*sqlmodel.Snapshot) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *snapshotDo) withDO(do gen.Dao) *snapshotDo {
	s.DO = *do.(*gen.DO)
	return s
}
