// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/dal/sqlmodel"
)

func newBonuse(db *gorm.DB, opts ...gen.DOOption) bonuse {
	_bonuse := bonuse{}

	_bonuse.bonuseDo.UseDB(db, opts...)
	_bonuse.bonuseDo.UseModel(&sqlmodel.Bonuse{})

	tableName := _bonuse.bonuseDo.TableName()
	_bonuse.ALL = field.NewAsterisk(tableName)
	_bonuse.ID = field.NewInt64(tableName, "id")
	_bonuse.UID = field.NewString(tableName, "uid")
	_bonuse.Tid = field.NewInt64(tableName, "tid")
	_bonuse.AssetID = field.NewString(tableName, "asset_id")
	_bonuse.Amount = field.NewString(tableName, "amount")
	_bonuse.Memo = field.NewString(tableName, "memo")
	_bonuse.TraceID = field.NewString(tableName, "trace_id")
	_bonuse.CreatedAt = field.NewInt64(tableName, "created_at")
	_bonuse.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_bonuse.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_bonuse.fillFieldMap()

	return _bonuse
}

type bonuse struct {
	bonuseDo bonuseDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.String // uid
	Tid       field.Int64  // id
	AssetID   field.String // id
	Amount    field.String
	Memo      field.String
	TraceID   field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (b bonuse) Table(newTableName string) *bonuse {
	b.bonuseDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bonuse) As(alias string) *bonuse {
	b.bonuseDo.DO = *(b.bonuseDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bonuse) updateTableName(table string) *bonuse {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.UID = field.NewString(table, "uid")
	b.Tid = field.NewInt64(table, "tid")
	b.AssetID = field.NewString(table, "asset_id")
	b.Amount = field.NewString(table, "amount")
	b.Memo = field.NewString(table, "memo")
	b.TraceID = field.NewString(table, "trace_id")
	b.CreatedAt = field.NewInt64(table, "created_at")
	b.UpdatedAt = field.NewInt64(table, "updated_at")
	b.DeletedAt = field.NewInt64(table, "deleted_at")

	b.fillFieldMap()

	return b
}

func (b *bonuse) WithContext(ctx context.Context) IBonuseDo { return b.bonuseDo.WithContext(ctx) }

func (b bonuse) TableName() string { return b.bonuseDo.TableName() }

func (b bonuse) Alias() string { return b.bonuseDo.Alias() }

func (b bonuse) Columns(cols ...field.Expr) gen.Columns { return b.bonuseDo.Columns(cols...) }

func (b *bonuse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bonuse) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 10)
	b.fieldMap["id"] = b.ID
	b.fieldMap["uid"] = b.UID
	b.fieldMap["tid"] = b.Tid
	b.fieldMap["asset_id"] = b.AssetID
	b.fieldMap["amount"] = b.Amount
	b.fieldMap["memo"] = b.Memo
	b.fieldMap["trace_id"] = b.TraceID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
}

func (b bonuse) clone(db *gorm.DB) bonuse {
	b.bonuseDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bonuse) replaceDB(db *gorm.DB) bonuse {
	b.bonuseDo.ReplaceDB(db)
	return b
}

type bonuseDo struct{ gen.DO }

type IBonuseDo interface {
	gen.SubQuery
	Debug() IBonuseDo
	WithContext(ctx context.Context) IBonuseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBonuseDo
	WriteDB() IBonuseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBonuseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBonuseDo
	Not(conds ...gen.Condition) IBonuseDo
	Or(conds ...gen.Condition) IBonuseDo
	Select(conds ...field.Expr) IBonuseDo
	Where(conds ...gen.Condition) IBonuseDo
	Order(conds ...field.Expr) IBonuseDo
	Distinct(cols ...field.Expr) IBonuseDo
	Omit(cols ...field.Expr) IBonuseDo
	Join(table schema.Tabler, on ...field.Expr) IBonuseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBonuseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBonuseDo
	Group(cols ...field.Expr) IBonuseDo
	Having(conds ...gen.Condition) IBonuseDo
	Limit(limit int) IBonuseDo
	Offset(offset int) IBonuseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBonuseDo
	Unscoped() IBonuseDo
	Create(values ...*sqlmodel.Bonuse) error
	CreateInBatches(values []*sqlmodel.Bonuse, batchSize int) error
	Save(values ...*sqlmodel.Bonuse) error
	First() (*sqlmodel.Bonuse, error)
	Take() (*sqlmodel.Bonuse, error)
	Last() (*sqlmodel.Bonuse, error)
	Find() ([]*sqlmodel.Bonuse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Bonuse, err error)
	FindInBatches(result *[]*sqlmodel.Bonuse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sqlmodel.Bonuse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBonuseDo
	Assign(attrs ...field.AssignExpr) IBonuseDo
	Joins(fields ...field.RelationField) IBonuseDo
	Preload(fields ...field.RelationField) IBonuseDo
	FirstOrInit() (*sqlmodel.Bonuse, error)
	FirstOrCreate() (*sqlmodel.Bonuse, error)
	FindByPage(offset int, limit int) (result []*sqlmodel.Bonuse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBonuseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bonuseDo) Debug() IBonuseDo {
	return b.withDO(b.DO.Debug())
}

func (b bonuseDo) WithContext(ctx context.Context) IBonuseDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bonuseDo) ReadDB() IBonuseDo {
	return b.Clauses(dbresolver.Read)
}

func (b bonuseDo) WriteDB() IBonuseDo {
	return b.Clauses(dbresolver.Write)
}

func (b bonuseDo) Session(config *gorm.Session) IBonuseDo {
	return b.withDO(b.DO.Session(config))
}

func (b bonuseDo) Clauses(conds ...clause.Expression) IBonuseDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bonuseDo) Returning(value interface{}, columns ...string) IBonuseDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bonuseDo) Not(conds ...gen.Condition) IBonuseDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bonuseDo) Or(conds ...gen.Condition) IBonuseDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bonuseDo) Select(conds ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bonuseDo) Where(conds ...gen.Condition) IBonuseDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bonuseDo) Order(conds ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bonuseDo) Distinct(cols ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bonuseDo) Omit(cols ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bonuseDo) Join(table schema.Tabler, on ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bonuseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bonuseDo) RightJoin(table schema.Tabler, on ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bonuseDo) Group(cols ...field.Expr) IBonuseDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bonuseDo) Having(conds ...gen.Condition) IBonuseDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bonuseDo) Limit(limit int) IBonuseDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bonuseDo) Offset(offset int) IBonuseDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bonuseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBonuseDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bonuseDo) Unscoped() IBonuseDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bonuseDo) Create(values ...*sqlmodel.Bonuse) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bonuseDo) CreateInBatches(values []*sqlmodel.Bonuse, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bonuseDo) Save(values ...*sqlmodel.Bonuse) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bonuseDo) First() (*sqlmodel.Bonuse, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Bonuse), nil
	}
}

func (b bonuseDo) Take() (*sqlmodel.Bonuse, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Bonuse), nil
	}
}

func (b bonuseDo) Last() (*sqlmodel.Bonuse, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Bonuse), nil
	}
}

func (b bonuseDo) Find() ([]*sqlmodel.Bonuse, error) {
	result, err := b.DO.Find()
	return result.([]*sqlmodel.Bonuse), err
}

func (b bonuseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Bonuse, err error) {
	buf := make([]*sqlmodel.Bonuse, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bonuseDo) FindInBatches(result *[]*sqlmodel.Bonuse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bonuseDo) Attrs(attrs ...field.AssignExpr) IBonuseDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bonuseDo) Assign(attrs ...field.AssignExpr) IBonuseDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bonuseDo) Joins(fields ...field.RelationField) IBonuseDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bonuseDo) Preload(fields ...field.RelationField) IBonuseDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bonuseDo) FirstOrInit() (*sqlmodel.Bonuse, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Bonuse), nil
	}
}

func (b bonuseDo) FirstOrCreate() (*sqlmodel.Bonuse, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Bonuse), nil
	}
}

func (b bonuseDo) FindByPage(offset int, limit int) (result []*sqlmodel.Bonuse, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bonuseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bonuseDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bonuseDo) Delete(models ...*sqlmodel.Bonuse) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bonuseDo) withDO(do gen.Dao) *bonuseDo {
	b.DO = *do.(*gen.DO)
	return b
}
