// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/dal/sqlmodel"
)

func newFeedback(db *gorm.DB, opts ...gen.DOOption) feedback {
	_feedback := feedback{}

	_feedback.feedbackDo.UseDB(db, opts...)
	_feedback.feedbackDo.UseModel(&sqlmodel.Feedback{})

	tableName := _feedback.feedbackDo.TableName()
	_feedback.ALL = field.NewAsterisk(tableName)
	_feedback.ID = field.NewInt32(tableName, "id")
	_feedback.UID = field.NewString(tableName, "uid")
	_feedback.Title = field.NewString(tableName, "title")
	_feedback.Content = field.NewString(tableName, "content")
	_feedback.CreatedAt = field.NewInt64(tableName, "created_at")
	_feedback.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_feedback.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_feedback.fillFieldMap()

	return _feedback
}

type feedback struct {
	feedbackDo feedbackDo

	ALL       field.Asterisk
	ID        field.Int32
	UID       field.String
	Title     field.String
	Content   field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (f feedback) Table(newTableName string) *feedback {
	f.feedbackDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feedback) As(alias string) *feedback {
	f.feedbackDo.DO = *(f.feedbackDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *feedback) updateTableName(table string) *feedback {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.UID = field.NewString(table, "uid")
	f.Title = field.NewString(table, "title")
	f.Content = field.NewString(table, "content")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.DeletedAt = field.NewInt64(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *feedback) WithContext(ctx context.Context) IFeedbackDo { return f.feedbackDo.WithContext(ctx) }

func (f feedback) TableName() string { return f.feedbackDo.TableName() }

func (f feedback) Alias() string { return f.feedbackDo.Alias() }

func (f feedback) Columns(cols ...field.Expr) gen.Columns { return f.feedbackDo.Columns(cols...) }

func (f *feedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feedback) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["uid"] = f.UID
	f.fieldMap["title"] = f.Title
	f.fieldMap["content"] = f.Content
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f feedback) clone(db *gorm.DB) feedback {
	f.feedbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f feedback) replaceDB(db *gorm.DB) feedback {
	f.feedbackDo.ReplaceDB(db)
	return f
}

type feedbackDo struct{ gen.DO }

type IFeedbackDo interface {
	gen.SubQuery
	Debug() IFeedbackDo
	WithContext(ctx context.Context) IFeedbackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFeedbackDo
	WriteDB() IFeedbackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFeedbackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFeedbackDo
	Not(conds ...gen.Condition) IFeedbackDo
	Or(conds ...gen.Condition) IFeedbackDo
	Select(conds ...field.Expr) IFeedbackDo
	Where(conds ...gen.Condition) IFeedbackDo
	Order(conds ...field.Expr) IFeedbackDo
	Distinct(cols ...field.Expr) IFeedbackDo
	Omit(cols ...field.Expr) IFeedbackDo
	Join(table schema.Tabler, on ...field.Expr) IFeedbackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFeedbackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFeedbackDo
	Group(cols ...field.Expr) IFeedbackDo
	Having(conds ...gen.Condition) IFeedbackDo
	Limit(limit int) IFeedbackDo
	Offset(offset int) IFeedbackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFeedbackDo
	Unscoped() IFeedbackDo
	Create(values ...*sqlmodel.Feedback) error
	CreateInBatches(values []*sqlmodel.Feedback, batchSize int) error
	Save(values ...*sqlmodel.Feedback) error
	First() (*sqlmodel.Feedback, error)
	Take() (*sqlmodel.Feedback, error)
	Last() (*sqlmodel.Feedback, error)
	Find() ([]*sqlmodel.Feedback, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Feedback, err error)
	FindInBatches(result *[]*sqlmodel.Feedback, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sqlmodel.Feedback) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFeedbackDo
	Assign(attrs ...field.AssignExpr) IFeedbackDo
	Joins(fields ...field.RelationField) IFeedbackDo
	Preload(fields ...field.RelationField) IFeedbackDo
	FirstOrInit() (*sqlmodel.Feedback, error)
	FirstOrCreate() (*sqlmodel.Feedback, error)
	FindByPage(offset int, limit int) (result []*sqlmodel.Feedback, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFeedbackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f feedbackDo) Debug() IFeedbackDo {
	return f.withDO(f.DO.Debug())
}

func (f feedbackDo) WithContext(ctx context.Context) IFeedbackDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedbackDo) ReadDB() IFeedbackDo {
	return f.Clauses(dbresolver.Read)
}

func (f feedbackDo) WriteDB() IFeedbackDo {
	return f.Clauses(dbresolver.Write)
}

func (f feedbackDo) Session(config *gorm.Session) IFeedbackDo {
	return f.withDO(f.DO.Session(config))
}

func (f feedbackDo) Clauses(conds ...clause.Expression) IFeedbackDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedbackDo) Returning(value interface{}, columns ...string) IFeedbackDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feedbackDo) Not(conds ...gen.Condition) IFeedbackDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedbackDo) Or(conds ...gen.Condition) IFeedbackDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedbackDo) Select(conds ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedbackDo) Where(conds ...gen.Condition) IFeedbackDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedbackDo) Order(conds ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedbackDo) Distinct(cols ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedbackDo) Omit(cols ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedbackDo) Join(table schema.Tabler, on ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedbackDo) Group(cols ...field.Expr) IFeedbackDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedbackDo) Having(conds ...gen.Condition) IFeedbackDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedbackDo) Limit(limit int) IFeedbackDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedbackDo) Offset(offset int) IFeedbackDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFeedbackDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedbackDo) Unscoped() IFeedbackDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedbackDo) Create(values ...*sqlmodel.Feedback) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedbackDo) CreateInBatches(values []*sqlmodel.Feedback, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedbackDo) Save(values ...*sqlmodel.Feedback) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedbackDo) First() (*sqlmodel.Feedback, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Feedback), nil
	}
}

func (f feedbackDo) Take() (*sqlmodel.Feedback, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Feedback), nil
	}
}

func (f feedbackDo) Last() (*sqlmodel.Feedback, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Feedback), nil
	}
}

func (f feedbackDo) Find() ([]*sqlmodel.Feedback, error) {
	result, err := f.DO.Find()
	return result.([]*sqlmodel.Feedback), err
}

func (f feedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sqlmodel.Feedback, err error) {
	buf := make([]*sqlmodel.Feedback, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedbackDo) FindInBatches(result *[]*sqlmodel.Feedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedbackDo) Attrs(attrs ...field.AssignExpr) IFeedbackDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedbackDo) Assign(attrs ...field.AssignExpr) IFeedbackDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedbackDo) Joins(fields ...field.RelationField) IFeedbackDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feedbackDo) Preload(fields ...field.RelationField) IFeedbackDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feedbackDo) FirstOrInit() (*sqlmodel.Feedback, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Feedback), nil
	}
}

func (f feedbackDo) FirstOrCreate() (*sqlmodel.Feedback, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sqlmodel.Feedback), nil
	}
}

func (f feedbackDo) FindByPage(offset int, limit int) (result []*sqlmodel.Feedback, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feedbackDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feedbackDo) Delete(models ...*sqlmodel.Feedback) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feedbackDo) withDO(do gen.Dao) *feedbackDo {
	f.DO = *do.(*gen.DO)
	return f
}
