// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/core"

	"time"
)

func newTopic(db *gorm.DB, opts ...gen.DOOption) topic {
	_topic := topic{}

	_topic.topicDo.UseDB(db, opts...)
	_topic.topicDo.UseModel(&core.Topic{})

	tableName := _topic.topicDo.TableName()
	_topic.ALL = field.NewAsterisk(tableName)
	_topic.ID = field.NewInt64(tableName, "id")
	_topic.Tid = field.NewString(tableName, "tid")
	_topic.Cid = field.NewInt64(tableName, "cid")
	_topic.Title = field.NewString(tableName, "title")
	_topic.Intro = field.NewString(tableName, "intro")
	_topic.Content = field.NewString(tableName, "content")
	_topic.YesRatio = field.NewString(tableName, "yes_ratio")
	_topic.NoRatio = field.NewString(tableName, "no_ratio")
	_topic.YesCount = field.NewString(tableName, "yes_count")
	_topic.NoCount = field.NewString(tableName, "no_count")
	_topic.TotalCount = field.NewString(tableName, "total_count")
	_topic.CollectCount = field.NewInt64(tableName, "collect_count")
	_topic.ReadCount = field.NewInt64(tableName, "read_count")
	_topic.ImgURL = field.NewString(tableName, "img_url")
	_topic.IsStop = field.NewBool(tableName, "is_stop")
	_topic.RefundEndTime = field.NewTime(tableName, "refund_end_time")
	_topic.EndTime = field.NewTime(tableName, "end_time")
	_topic.CreatedAt = field.NewTime(tableName, "created_at")
	_topic.UpdatedAt = field.NewTime(tableName, "updated_at")
	_topic.DeletedAt = field.NewTime(tableName, "deleted_at")

	_topic.fillFieldMap()

	return _topic
}

type topic struct {
	topicDo

	ALL           field.Asterisk
	ID            field.Int64
	Tid           field.String
	Cid           field.Int64
	Title         field.String
	Intro         field.String
	Content       field.String
	YesRatio      field.String
	NoRatio       field.String
	YesCount      field.String
	NoCount       field.String
	TotalCount    field.String
	CollectCount  field.Int64
	ReadCount     field.Int64
	ImgURL        field.String
	IsStop        field.Bool
	RefundEndTime field.Time
	EndTime       field.Time
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t topic) Table(newTableName string) *topic {
	t.topicDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t topic) As(alias string) *topic {
	t.topicDo.DO = *(t.topicDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *topic) updateTableName(table string) *topic {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Tid = field.NewString(table, "tid")
	t.Cid = field.NewInt64(table, "cid")
	t.Title = field.NewString(table, "title")
	t.Intro = field.NewString(table, "intro")
	t.Content = field.NewString(table, "content")
	t.YesRatio = field.NewString(table, "yes_ratio")
	t.NoRatio = field.NewString(table, "no_ratio")
	t.YesCount = field.NewString(table, "yes_count")
	t.NoCount = field.NewString(table, "no_count")
	t.TotalCount = field.NewString(table, "total_count")
	t.CollectCount = field.NewInt64(table, "collect_count")
	t.ReadCount = field.NewInt64(table, "read_count")
	t.ImgURL = field.NewString(table, "img_url")
	t.IsStop = field.NewBool(table, "is_stop")
	t.RefundEndTime = field.NewTime(table, "refund_end_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewTime(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *topic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *topic) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["tid"] = t.Tid
	t.fieldMap["cid"] = t.Cid
	t.fieldMap["title"] = t.Title
	t.fieldMap["intro"] = t.Intro
	t.fieldMap["content"] = t.Content
	t.fieldMap["yes_ratio"] = t.YesRatio
	t.fieldMap["no_ratio"] = t.NoRatio
	t.fieldMap["yes_count"] = t.YesCount
	t.fieldMap["no_count"] = t.NoCount
	t.fieldMap["total_count"] = t.TotalCount
	t.fieldMap["collect_count"] = t.CollectCount
	t.fieldMap["read_count"] = t.ReadCount
	t.fieldMap["img_url"] = t.ImgURL
	t.fieldMap["is_stop"] = t.IsStop
	t.fieldMap["refund_end_time"] = t.RefundEndTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t topic) clone(db *gorm.DB) topic {
	t.topicDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t topic) replaceDB(db *gorm.DB) topic {
	t.topicDo.ReplaceDB(db)
	return t
}

type topicDo struct{ gen.DO }

type ITopicDo interface {
	gen.SubQuery
	Debug() ITopicDo
	WithContext(ctx context.Context) ITopicDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITopicDo
	WriteDB() ITopicDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITopicDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITopicDo
	Not(conds ...gen.Condition) ITopicDo
	Or(conds ...gen.Condition) ITopicDo
	Select(conds ...field.Expr) ITopicDo
	Where(conds ...gen.Condition) ITopicDo
	Order(conds ...field.Expr) ITopicDo
	Distinct(cols ...field.Expr) ITopicDo
	Omit(cols ...field.Expr) ITopicDo
	Join(table schema.Tabler, on ...field.Expr) ITopicDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITopicDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITopicDo
	Group(cols ...field.Expr) ITopicDo
	Having(conds ...gen.Condition) ITopicDo
	Limit(limit int) ITopicDo
	Offset(offset int) ITopicDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITopicDo
	Unscoped() ITopicDo
	Create(values ...*core.Topic) error
	CreateInBatches(values []*core.Topic, batchSize int) error
	Save(values ...*core.Topic) error
	First() (*core.Topic, error)
	Take() (*core.Topic, error)
	Last() (*core.Topic, error)
	Find() ([]*core.Topic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Topic, err error)
	FindInBatches(result *[]*core.Topic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*core.Topic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITopicDo
	Assign(attrs ...field.AssignExpr) ITopicDo
	Joins(fields ...field.RelationField) ITopicDo
	Preload(fields ...field.RelationField) ITopicDo
	FirstOrInit() (*core.Topic, error)
	FirstOrCreate() (*core.Topic, error)
	FindByPage(offset int, limit int) (result []*core.Topic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITopicDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetTopicsByTids(ctx context.Context, tids []string) (result []*core.Topic, err error)
	GetTopicsByCid(ctx context.Context, cid int64) (result []*core.Topic, err error)
	GetTopicByTid(ctx context.Context, tid string) (result *core.Topic, err error)
	DeleteTopic(ctx context.Context, tid string) (err error)
	StopTopic(ctx context.Context, tid string) (err error)
	CreateTopic(ctx context.Context, topic *core.Topic) (err error)
	ListTopicsByCid(ctx context.Context, cid int64, created_at time.Time, page_size int64) (result []*core.Topic, err error)
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE uid in (@tids) AND deleted_at IS NULL;
func (t topicDo) GetTopicsByTids(ctx context.Context, tids []string) (result []*core.Topic, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, tids)
	generateSQL.WriteString("SELECT * FROM topics WHERE uid in (?) AND deleted_at IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM @@table
// WHERE cid = @cid AND deleted_at IS NULL;
func (t topicDo) GetTopicsByCid(ctx context.Context, cid int64) (result []*core.Topic, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cid)
	generateSQL.WriteString("SELECT * FROM topics WHERE cid = ? AND deleted_at IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM @@table
// WHERE tid = @tid AND deleted_at IS NULL;
func (t topicDo) GetTopicByTid(ctx context.Context, tid string) (result *core.Topic, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, tid)
	generateSQL.WriteString("SELECT * FROM topics WHERE tid = ? AND deleted_at IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// {{set}}
//
//	"deleted_at" = NOW()
//
// {{end}}
// WHERE
//
//	"tid" = @tid;
func (t topicDo) DeleteTopic(ctx context.Context, tid string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE topics ")
	var setSQL0 strings.Builder
	setSQL0.WriteString("\"deleted_at\" = NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, tid)
	generateSQL.WriteString("WHERE \"tid\" = ?; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// {{set}}
//
//	"is_stop" = 1
//
// {{end}}
// WHERE
//
//	"tid" = @tid;
func (t topicDo) StopTopic(ctx context.Context, tid string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE topics ")
	var setSQL0 strings.Builder
	setSQL0.WriteString("\"is_stop\" = 1 ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, tid)
	generateSQL.WriteString("WHERE \"tid\" = ?; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table
//
//	(
//		"tid","cid","title","intro",
//		"content","yes_ratio","no_ratio","yes_count",
//		"no_count","total_count","collect_count","read_count",
//		"img_url","is_stop","refund_end_time","end_time",
//		"created_at","updated_at","deleted_at"
//	)
//
// VALUES
//
//	(
//		@topic.Tid,@topic.Cid,@topic.Title,@topic.Intro,
//		@topic.Content,"50.00","50.00","0",
//		"0","0","0","0",
//		@topic.ImgURL,0,@topic.RefundEndTime,@topic.EndTime,
//		NOW(),NOW(),NULL,
//	);
func (t topicDo) CreateTopic(ctx context.Context, topic *core.Topic) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, topic.Tid)
	params = append(params, topic.Cid)
	params = append(params, topic.Title)
	params = append(params, topic.Intro)
	params = append(params, topic.Content)
	params = append(params, topic.ImgURL)
	params = append(params, topic.RefundEndTime)
	params = append(params, topic.EndTime)
	generateSQL.WriteString("INSERT INTO topics ( \"tid\",\"cid\",\"title\",\"intro\", \"content\",\"yes_ratio\",\"no_ratio\",\"yes_count\", \"no_count\",\"total_count\",\"collect_count\",\"read_count\", \"img_url\",\"is_stop\",\"refund_end_time\",\"end_time\", \"created_at\",\"updated_at\",\"deleted_at\" ) VALUES ( ?,?,?,?, ?,\"50.00\",\"50.00\",\"0\", \"0\",\"0\",\"0\",\"0\", ?,0,?,?, NOW(),NOW(),NULL, ); ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM @@table
// WHERE "cid" = @cid AND
// "created_at" <= @created_at AND
// "deleted_at" = NULL AND
// "is_stop" = 0
// ORDER BY "created_at" DESC
// LIMIT @page_size;
func (t topicDo) ListTopicsByCid(ctx context.Context, cid int64, created_at time.Time, page_size int64) (result []*core.Topic, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cid)
	params = append(params, created_at)
	params = append(params, page_size)
	generateSQL.WriteString("SELECT * FROM topics WHERE \"cid\" = ? AND \"created_at\" <= ? AND \"deleted_at\" = NULL AND \"is_stop\" = 0 ORDER BY \"created_at\" DESC LIMIT ?; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t topicDo) Debug() ITopicDo {
	return t.withDO(t.DO.Debug())
}

func (t topicDo) WithContext(ctx context.Context) ITopicDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t topicDo) ReadDB() ITopicDo {
	return t.Clauses(dbresolver.Read)
}

func (t topicDo) WriteDB() ITopicDo {
	return t.Clauses(dbresolver.Write)
}

func (t topicDo) Session(config *gorm.Session) ITopicDo {
	return t.withDO(t.DO.Session(config))
}

func (t topicDo) Clauses(conds ...clause.Expression) ITopicDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t topicDo) Returning(value interface{}, columns ...string) ITopicDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t topicDo) Not(conds ...gen.Condition) ITopicDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t topicDo) Or(conds ...gen.Condition) ITopicDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t topicDo) Select(conds ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t topicDo) Where(conds ...gen.Condition) ITopicDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t topicDo) Order(conds ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t topicDo) Distinct(cols ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t topicDo) Omit(cols ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t topicDo) Join(table schema.Tabler, on ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t topicDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITopicDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t topicDo) RightJoin(table schema.Tabler, on ...field.Expr) ITopicDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t topicDo) Group(cols ...field.Expr) ITopicDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t topicDo) Having(conds ...gen.Condition) ITopicDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t topicDo) Limit(limit int) ITopicDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t topicDo) Offset(offset int) ITopicDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t topicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITopicDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t topicDo) Unscoped() ITopicDo {
	return t.withDO(t.DO.Unscoped())
}

func (t topicDo) Create(values ...*core.Topic) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t topicDo) CreateInBatches(values []*core.Topic, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t topicDo) Save(values ...*core.Topic) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t topicDo) First() (*core.Topic, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*core.Topic), nil
	}
}

func (t topicDo) Take() (*core.Topic, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*core.Topic), nil
	}
}

func (t topicDo) Last() (*core.Topic, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*core.Topic), nil
	}
}

func (t topicDo) Find() ([]*core.Topic, error) {
	result, err := t.DO.Find()
	return result.([]*core.Topic), err
}

func (t topicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.Topic, err error) {
	buf := make([]*core.Topic, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t topicDo) FindInBatches(result *[]*core.Topic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t topicDo) Attrs(attrs ...field.AssignExpr) ITopicDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t topicDo) Assign(attrs ...field.AssignExpr) ITopicDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t topicDo) Joins(fields ...field.RelationField) ITopicDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t topicDo) Preload(fields ...field.RelationField) ITopicDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t topicDo) FirstOrInit() (*core.Topic, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*core.Topic), nil
	}
}

func (t topicDo) FirstOrCreate() (*core.Topic, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*core.Topic), nil
	}
}

func (t topicDo) FindByPage(offset int, limit int) (result []*core.Topic, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t topicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t topicDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t topicDo) Delete(models ...*core.Topic) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *topicDo) withDO(do gen.Dao) *topicDo {
	t.DO = *do.(*gen.DO)
	return t
}
