// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"github.com/lixvyang/betxin.one/internal/model/database/mysql/core"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&core.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewInt64(tableName, "id")
	_user.UID = field.NewString(tableName, "uid")
	_user.IdentityNumber = field.NewString(tableName, "identity_number")
	_user.FullName = field.NewString(tableName, "full_name")
	_user.AvatarURL = field.NewString(tableName, "avatar_url")
	_user.SessionID = field.NewString(tableName, "session_id")
	_user.Biography = field.NewString(tableName, "biography")
	_user.PrivateKey = field.NewString(tableName, "private_key")
	_user.ClientID = field.NewString(tableName, "client_id")
	_user.Contract = field.NewString(tableName, "contract")
	_user.IsMvmUser = field.NewBool(tableName, "is_mvm_user")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL            field.Asterisk
	ID             field.Int64
	UID            field.String
	IdentityNumber field.String
	FullName       field.String
	AvatarURL      field.String
	SessionID      field.String
	Biography      field.String
	PrivateKey     field.String
	ClientID       field.String
	Contract       field.String
	IsMvmUser      field.Bool
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewString(table, "uid")
	u.IdentityNumber = field.NewString(table, "identity_number")
	u.FullName = field.NewString(table, "full_name")
	u.AvatarURL = field.NewString(table, "avatar_url")
	u.SessionID = field.NewString(table, "session_id")
	u.Biography = field.NewString(table, "biography")
	u.PrivateKey = field.NewString(table, "private_key")
	u.ClientID = field.NewString(table, "client_id")
	u.Contract = field.NewString(table, "contract")
	u.IsMvmUser = field.NewBool(table, "is_mvm_user")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["identity_number"] = u.IdentityNumber
	u.fieldMap["full_name"] = u.FullName
	u.fieldMap["avatar_url"] = u.AvatarURL
	u.fieldMap["session_id"] = u.SessionID
	u.fieldMap["biography"] = u.Biography
	u.fieldMap["private_key"] = u.PrivateKey
	u.fieldMap["client_id"] = u.ClientID
	u.fieldMap["contract"] = u.Contract
	u.fieldMap["is_mvm_user"] = u.IsMvmUser
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*core.User) error
	CreateInBatches(values []*core.User, batchSize int) error
	Save(values ...*core.User) error
	First() (*core.User, error)
	Take() (*core.User, error)
	Last() (*core.User, error)
	Find() ([]*core.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.User, err error)
	FindInBatches(result *[]*core.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*core.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*core.User, error)
	FirstOrCreate() (*core.User, error)
	FindByPage(offset int, limit int) (result []*core.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetUserByUid(ctx context.Context, uid string) (result *core.User, err error)
	GetUserByUids(ctx context.Context, uids []string) (result []*core.User, err error)
	CreateUser(ctx context.Context, user *core.User) (result string, err error)
	UpdateUserInfo(ctx context.Context, uid string, user *core.User) (err error)
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE uid = @uid;
func (u userDo) GetUserByUid(ctx context.Context, uid string) (result *core.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("SELECT * FROM users WHERE uid = ?; ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE uid in (@uids);
func (u userDo) GetUserByUids(ctx context.Context, uids []string) (result []*core.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uids)
	generateSQL.WriteString("SELECT * FROM users WHERE uid in (?); ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO user
//
//	(
//		"full_name", "avatar_url",
//		"uid", "identity_number",
//		"session_id", "is_mvm_user",
//		"biography", "private_key",
//		"client_id", "contract"
//	)
//
// VALUES
//
//	(
//		@user.FullName, @user.AvatarURL,
//		@user.UID, @user.IdentityNumber,
//		@user.Biography, @user.PrivateKey,
//		@user.ClientID, @user.Contract
//	)
//
// RETURNING uid;
func (u userDo) CreateUser(ctx context.Context, user *core.User) (result string, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, user.FullName)
	params = append(params, user.AvatarURL)
	params = append(params, user.UID)
	params = append(params, user.IdentityNumber)
	params = append(params, user.Biography)
	params = append(params, user.PrivateKey)
	params = append(params, user.ClientID)
	params = append(params, user.Contract)
	generateSQL.WriteString("INSERT INTO user ( \"full_name\", \"avatar_url\", \"uid\", \"identity_number\", \"session_id\", \"is_mvm_user\", \"biography\", \"private_key\", \"client_id\", \"contract\" ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING uid; ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
//
//	{{set}}
//	  "full_name"=@user.FullName,
//	  "avatar_url"=@user.AvatarURL,
//	  "biography"=@user.Biography
//	{{end}}
//
// WHERE
//
//	"uid" = @uid;
func (u userDo) UpdateUserInfo(ctx context.Context, uid string, user *core.User) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE users ")
	var setSQL0 strings.Builder
	params = append(params, user.FullName)
	params = append(params, user.AvatarURL)
	params = append(params, user.Biography)
	setSQL0.WriteString("\"full_name\"=?, \"avatar_url\"=?, \"biography\"=? ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, uid)
	generateSQL.WriteString("WHERE \"uid\" = ?; ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*core.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*core.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*core.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*core.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*core.User), nil
	}
}

func (u userDo) Take() (*core.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*core.User), nil
	}
}

func (u userDo) Last() (*core.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*core.User), nil
	}
}

func (u userDo) Find() ([]*core.User, error) {
	result, err := u.DO.Find()
	return result.([]*core.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*core.User, err error) {
	buf := make([]*core.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*core.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*core.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*core.User), nil
	}
}

func (u userDo) FirstOrCreate() (*core.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*core.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*core.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*core.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
